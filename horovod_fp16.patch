diff --git a/horovod/common/mpi_message.cc b/horovod/common/mpi_message.cc
index d7ba8be..b765c51 100644
--- a/horovod/common/mpi_message.cc
+++ b/horovod/common/mpi_message.cc
@@ -41,6 +41,9 @@ const std::string& MPIDataType_Name(MPIDataType value) {
   case HOROVOD_INT64:
     static const std::string int64("int64");
     return int64;
+  case HOROVOD_FLOAT16:
+    static const std::string float16("float16");
+    return float16;
   case HOROVOD_FLOAT32:
     static const std::string float32("float32");
     return float32;
diff --git a/horovod/common/mpi_message.h b/horovod/common/mpi_message.h
index 19257a3..8926057 100644
--- a/horovod/common/mpi_message.h
+++ b/horovod/common/mpi_message.h
@@ -32,7 +32,8 @@ enum MPIDataType {
   HOROVOD_INT64 = 5,
   HOROVOD_FLOAT32 = 6,
   HOROVOD_FLOAT64 = 7,
-  HOROVOD_BOOL = 8
+  HOROVOD_BOOL = 8,
+  HOROVOD_FLOAT16 = 9
 };
 
 const std::string& MPIDataType_Name(MPIDataType value);
diff --git a/horovod/common/operations.cc b/horovod/common/operations.cc
index 6bbb2f4..cd5a85e 100644
--- a/horovod/common/operations.cc
+++ b/horovod/common/operations.cc
@@ -493,6 +493,8 @@ ncclDataType_t GetNCCLDataType(const std::shared_ptr<Tensor> tensor) {
     return ncclInt32;
   case HOROVOD_INT64:
     return ncclInt64;
+  case HOROVOD_FLOAT16:
+    return ncclFloat16;
   case HOROVOD_FLOAT32:
     return ncclFloat32;
   case HOROVOD_FLOAT64:
diff --git a/horovod/tensorflow/mpi_ops.cc b/horovod/tensorflow/mpi_ops.cc
index f736e4b..59a67a1 100644
--- a/horovod/tensorflow/mpi_ops.cc
+++ b/horovod/tensorflow/mpi_ops.cc
@@ -184,6 +184,8 @@ const common::MPIDataType TFTensor::dtype() const {
     return common::HOROVOD_INT32;
   case DT_INT64:
     return common::HOROVOD_INT64;
+  case DT_HALF:
+    return common::HOROVOD_FLOAT16;
   case DT_FLOAT:
     return common::HOROVOD_FLOAT32;
   case DT_DOUBLE:
@@ -309,7 +311,7 @@ REGISTER_KERNEL_BUILDER(Name("HorovodAllreduce").Device(DEVICE_GPU),
 #endif
 
 REGISTER_OP("HorovodAllreduce")
-    .Attr("T: {int32, int64, float32, float64}")
+    .Attr("T: {int32, int64, float16, float32, float64}")
     .Input("tensor: T")
     .Output("sum: T")
     .SetShapeFn([](shape_inference::InferenceContext* c) {
diff --git a/test/test_tensorflow.py b/test/test_tensorflow.py
index 0727182..6a7ff82 100644
--- a/test/test_tensorflow.py
+++ b/test/test_tensorflow.py
@@ -113,7 +113,7 @@ class MPITests(tf.test.TestCase):
         one_gpu = tf.GPUOptions(visible_device_list=str(local_rank))
         gpu_config = tf.ConfigProto(gpu_options=one_gpu)
         with self.test_session(config=gpu_config) as session:
-            dtypes = [tf.int32, tf.int64, tf.float32, tf.float64]
+            dtypes = [tf.int32, tf.int64, tf.float16, tf.float32, tf.float64]
             dims = [1, 2, 3]
             for dtype, dim in itertools.product(dtypes, dims):
                 with tf.device("/gpu:0"):
@@ -156,7 +156,7 @@ class MPITests(tf.test.TestCase):
         one_gpu = tf.GPUOptions(visible_device_list=str(local_rank))
         gpu_config = tf.ConfigProto(gpu_options=one_gpu)
         with self.test_session(config=gpu_config) as session:
-            dtypes = [tf.int32, tf.int64, tf.float32, tf.float64]
+            dtypes = [tf.int32, tf.int64, tf.float16, tf.float32, tf.float64]
             dims = [1, 2, 3]
             tests = []
             for dtype, dim in itertools.product(dtypes, dims):
@@ -203,7 +203,7 @@ class MPITests(tf.test.TestCase):
             '%d,%d' % (local_rank * 2, local_rank * 2 + 1)))
         gpu_config = tf.ConfigProto(gpu_options=two_gpus)
         with self.test_session(config=gpu_config) as session:
-            dtypes = [tf.int32, tf.int64, tf.float32, tf.float64]
+            dtypes = [tf.int32, tf.int64, tf.float16, tf.float32, tf.float64]
             dims = [1, 2, 3]
             for dtype, dim in itertools.product(dtypes, dims):
                 iter += 1
